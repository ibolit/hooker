#!/usr/bin/env python3
import random
import re
import string
from sys import argv
import subprocess
import shlex
from collections import namedtuple, defaultdict

CommitMessage = namedtuple('CommitMessage', 'author, subject, body')

TICKET_RE = re.compile(r'^MAPSME-\d{1,6}$')


def main():
    old = argv[1]
    new = argv[2]

    found_tickets = filter_messages(git_log(old, new))

    for ticket, subjects in found_tickets.items():
        print('....Ticket: {}'.format(ticket))
        for subject in subjects:
            print('........Subject: {}'.format(subject))


def git_log(old_rev, new_rev):
    separator = random_string()
    log_entries = git(
        'log', '{}..{}'.format(old_rev, new_rev),
        '--pretty="format:%aN{0}%s{0}%b{0}-{0}"'.format(separator)
    ).decode()
    log_entries = filter(None, log_entries.split('{0}-{0}'.format(separator)))
    for entry in map(str.strip, log_entries):
        message_parts = entry.split(separator)
        message_parts = message_parts + [''] * (3 - len(message_parts))

        yield CommitMessage(*message_parts)


def random_string(length=10):
    """Generate a random string of fixed length """
    letters = string.ascii_letters + string.punctuation
    return ''.join(random.choice(letters) for _ in range(length))


def git(*args):
    command = 'git ' + ' '.join(args)
    kwargs = {
         'stdout': subprocess.PIPE,
         'stderr': subprocess.PIPE
    }
    proc = subprocess.Popen(shlex.split(command), **kwargs)
    (stdout_str, stderr_str) = proc.communicate()
    return stdout_str


def filter_messages(messages):
    found_tickets = defaultdict(list)
    for message in messages:
        ticket = get_ticket_from_body(message)
        found_tickets[ticket].append(message.subject)
    return found_tickets


def get_ticket_from_body(message):
    body = message.body.splitlines()
    if body and TICKET_RE.match(body[0]):
        return body[0]
    return None


if __name__ == '__main__':
    main()
